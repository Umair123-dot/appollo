[{"C:\\Users\\hp\\Reactnew\\appollo\\src\\index.js":"1","C:\\Users\\hp\\Reactnew\\appollo\\src\\App.js":"2","C:\\Users\\hp\\Reactnew\\appollo\\src\\reportWebVitals.js":"3","C:\\Users\\hp\\Reactnew\\appollo\\src\\dogs.js":"4","C:\\Users\\hp\\Reactnew\\appollo\\src\\AddUser.js":"5","C:\\Users\\hp\\Reactnew\\appollo\\src\\Up.js":"6","C:\\Users\\hp\\Reactnew\\appollo\\src\\Update.js":"7","C:\\Users\\hp\\Reactnew\\appollo\\src\\HeaderComponent.js":"8","C:\\Users\\hp\\Reactnew\\appollo\\src\\UserInterface.js":"9","C:\\Users\\hp\\Reactnew\\appollo\\src\\NewElements.js":"10"},{"size":925,"mtime":1611322528869,"results":"11","hashOfConfig":"12"},{"size":1683,"mtime":1611402581816,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":563,"mtime":1611305375571,"results":"15","hashOfConfig":"12"},{"size":745,"mtime":1611385393192,"results":"16","hashOfConfig":"12"},{"size":681,"mtime":1611312436447,"results":"17","hashOfConfig":"12"},{"size":6493,"mtime":1611405658605,"results":"18","hashOfConfig":"12"},{"size":511,"mtime":1611404990172,"results":"19","hashOfConfig":"12"},{"size":1051,"mtime":1611401770673,"results":"20","hashOfConfig":"12"},{"size":326,"mtime":1611396038455,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"12lhje9",{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\hp\\Reactnew\\appollo\\src\\index.js",["46"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ApolloProvider,gql } from '@apollo/client';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport reportWebVitals from './reportWebVitals';\nconst client = new ApolloClient({\n  uri: 'http://192.168.100.5:3500/graphql',\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache'\n    },\n    query: {\n      fetchPolicy: 'no-cache'\n    },\n    mutate: {\n      fetchPolicy: 'no-cache'\n    }\n  }\n});\n\n\n\n\n\n\nReactDOM.render(\n  < ApolloProvider client={client}>\n    <App />\n  </ ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["47","48"],"C:\\Users\\hp\\Reactnew\\appollo\\src\\App.js",["49","50","51"],"C:\\Users\\hp\\Reactnew\\appollo\\src\\reportWebVitals.js",[],"C:\\Users\\hp\\Reactnew\\appollo\\src\\dogs.js",[],"C:\\Users\\hp\\Reactnew\\appollo\\src\\AddUser.js",["52"],"import React from 'react';\r\nimport { gql, useMutation } from '@apollo/client';\r\nconst addUser=gql`\r\n mutation($name:  String!) {\r\n     createUser(name: $name){\r\n     name \r\n     id\r\n }\r\n}\r\n\r\n\r\n`;\r\n\r\n\r\n\r\n\r\nconst AddUser = () => {\r\n    let input;\r\n\r\n    const[createUser,{data}]=useMutation(addUser);\r\n\r\n    return (\r\n        <div>\r\n        <form\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          createUser({ variables: { name: input.value } });\r\n          input.value = '';\r\n        }}  \r\n      >\r\n        <input\r\n          ref={node => {\r\n            input = node;\r\n          }}\r\n        />\r\n        <button type=\"submit\">Add Todo</button>\r\n      </form>\r\n\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddUser\r\n","C:\\Users\\hp\\Reactnew\\appollo\\src\\Up.js",["53"],"C:\\Users\\hp\\Reactnew\\appollo\\src\\Update.js",["54"],"import React, { Fragment, useState, useEffect } from 'react'\r\nimport { gql, useLazyQuery, useMutation } from '@apollo/client';\r\nimport {Container,CssBaseline,Button,TextField} from '@material-ui/core';\r\nimport HeaderComponent from './HeaderComponent';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport UserInterface from './UserInterface';\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 500,\r\n    },\r\n  });\r\n\r\n\r\nfunction createData(Roll,User) {\r\n  return { Roll, User };\r\n}\r\n\r\n\r\n\r\nconst USERS = gql`\r\n   query {\r\n       users{\r\n           id \r\n           name\r\n       }\r\n   }\r\n\r\n\r\n`;\r\nconst UPDATE_USER = gql`\r\nmutation($id:Int!,$name:String!){\r\n    updateUser(id:$id,name:$name){\r\n    id \r\n    name\r\n    }\r\n  }\r\n  \r\n`;\r\nconst CREATE_USER = gql`\r\nmutation($name:String!){\r\n    createUser(name:$name){\r\n        id \r\n        name\r\n    }\r\n  }   \r\n`;\r\n\r\nconst DELETE_USER = gql`\r\n  mutation ($id: Int!) {\r\n      deleteUser(id: $id) {\r\n          id\r\n          name\r\n      }\r\n  }\r\n`;\r\nconst Update = () => {\r\n    const [user, setUser] = useState('');\r\n    const [userId, setUserId] = useState('');\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const handleChange = ({ target: { value } }) => setUser(value);\r\n\r\n    const [users, { loading, error, data }] = useLazyQuery(USERS);\r\n    const [updateUser] = useMutation(UPDATE_USER);\r\n    const [createUser] = useMutation(CREATE_USER);\r\n    const [deleteUser] = useMutation(DELETE_USER);\r\n\r\n    useEffect(() => {\r\n        users();\r\n    }, [users])\r\n\r\n    const onSubmitHandler = (ev) => {\r\n        ev.preventDefault();\r\n        if (!user.trim()) return console.log('User field is empty...');\r\n        if (editMode) {\r\n            // update mutation logics\r\n            updateUser({ variables: { id: userId, name: user } }).then(() => {\r\n                setUser('');\r\n                setEditMode(false);\r\n                setUserId('');\r\n            })\r\n        } else {\r\n            // create mutation logics\r\n            createUser({ variables: { name: user } }).then(() => setUser(''))\r\n        }\r\n        users();\r\n    }\r\n    //Edit Function for edit mod\r\n    const onEdit = id => {\r\n        const u = data.users.find((user) => user.id === id);\r\n        setUser(u.name);\r\n        setEditMode(true);\r\n        setUserId(id);\r\n    }\r\n\r\n\r\n    const onDelete = id => {\r\n        deleteUser({ variables: { id } }).then(() => {\r\n            if (editMode) {\r\n                setUser('');\r\n                setEditMode(false);\r\n                setUserId('')\r\n            }\r\n            users();\r\n        })\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n\r\n\r\n    if (loading || !data) return <p>Loading...</p>;\r\n    if (error) return <p>Error :(</p>;\r\n\r\n    return (\r\n        <Fragment>\r\n         <UserInterface />\r\n        <CssBaseline />\r\n        <Container style={{backgroundColor:\"#efefef\"}}>\r\n       \r\n        <HeaderComponent></HeaderComponent>\r\n        <form style={{display:'flex',justifyContent:'center',marginBottom:'50px',marginTop:'50px'}}\r\n                onSubmit={onSubmitHandler}\r\n            >\r\n              <TextField \r\n        id=\"outlined-secondary\"\r\n        label=\"Username\"\r\n        variant=\"outlined\"\r\n        color=\"Primary\"\r\n        value={user}\r\n        onChange={handleChange}\r\n      />\r\n                {/* <input\r\n                    value={user}\r\n                    onChange={handleChange}\r\n                /> */}\r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" style={{marginLeft:'10px',height:'55px'}}>{editMode ? 'Update' : 'Save'}</Button>\r\n                {/* <button type=\"submit\">{editMode ? 'Update' : 'Save'}</button> */}\r\n            </form>\r\n            <br />\r\n\r\n\r\n            <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead style={{backgroundColor:'grey',color:'blue'}}>\r\n          <TableRow>\r\n            <TableCell>Roll (For User)</TableCell>\r\n            <TableCell align=\"right\" >User Name</TableCell>\r\n            <TableCell align=\"right\">Edit</TableCell>\r\n            <TableCell align=\"right\">Delete</TableCell>\r\n            \r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n        {data.users.map(({ id, name }, i) => (\r\n            <TableRow key={id}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {id}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{name}</TableCell>\r\n              <TableCell align=\"right\">\r\n              <EditOutlinedIcon  onClick={() => onEdit(id)}></EditOutlinedIcon>\r\n\r\n             \r\n                                \r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n              <DeleteIcon onClick={() => onDelete(id)}></DeleteIcon>\r\n              \r\n              </TableCell>\r\n\r\n              {/* <TableCell align=\"right\">{row.fat}</TableCell> */}\r\n              \r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n\r\n            {/* this is the Table work\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>User Id</th>\r\n                        <th>User Name</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {data.users.map(({ id, name }, i) => (\r\n                        <tr key={i}>\r\n                            <td>{id}</td>\r\n                            <td>{name}</td>\r\n                            <td>\r\n                                <input type='button' value='edit' onClick={() => onEdit(id)} />\r\n                                <input type='button' value='delete' onClick={() => onDelete(id)} />\r\n                            </td>\r\n                        </tr>\r\n                    ))};\r\n                </tbody>\r\n            </table> */}\r\n            \r\n            </Container>\r\n            \r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Update\r\n","C:\\Users\\hp\\Reactnew\\appollo\\src\\HeaderComponent.js",[],"C:\\Users\\hp\\Reactnew\\appollo\\src\\UserInterface.js",["55"],"C:\\Users\\hp\\Reactnew\\appollo\\src\\NewElements.js",["56","57"],{"ruleId":"58","severity":1,"message":"59","line":5,"column":25,"nodeType":"60","messageId":"61","endLine":5,"endColumn":28},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"58","severity":1,"message":"66","line":2,"column":8,"nodeType":"60","messageId":"61","endLine":2,"endColumn":15},{"ruleId":"58","severity":1,"message":"67","line":3,"column":8,"nodeType":"60","messageId":"61","endLine":3,"endColumn":12},{"ruleId":"58","severity":1,"message":"68","line":5,"column":8,"nodeType":"60","messageId":"61","endLine":5,"endColumn":21},{"ruleId":"58","severity":1,"message":"69","line":20,"column":23,"nodeType":"60","messageId":"61","endLine":20,"endColumn":27},{"ruleId":"58","severity":1,"message":"69","line":14,"column":21,"nodeType":"60","messageId":"61","endLine":14,"endColumn":25},{"ruleId":"58","severity":1,"message":"70","line":24,"column":10,"nodeType":"60","messageId":"61","endLine":24,"endColumn":20},{"ruleId":"58","severity":1,"message":"71","line":6,"column":8,"nodeType":"60","messageId":"61","endLine":6,"endColumn":16},{"ruleId":"58","severity":1,"message":"72","line":1,"column":8,"nodeType":"60","messageId":"61","endLine":1,"endColumn":13},{"ruleId":"58","severity":1,"message":"73","line":5,"column":7,"nodeType":"60","messageId":"61","endLine":5,"endColumn":16},"no-unused-vars","'gql' is defined but never used.","Identifier","unusedVar","no-native-reassign",["74"],"no-negated-in-lhs",["75"],"'AddUser' is defined but never used.","'Dogs' is defined but never used.","'UserInterface' is defined but never used.","'data' is assigned a value but never used.","'createData' is defined but never used.","'MenuIcon' is defined but never used.","'React' is defined but never used.","'useStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]